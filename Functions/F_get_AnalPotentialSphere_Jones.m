function [theta,spherePot] = F_get_AnalPotentialSphere_Jones(R,pcharge,x_pc,y_pc,z_pc,k_air,k_sphere,N)
% RETURNS SURFACE POTENTIAL OF A DIELECTRIC SPHERE IN THE FIELD GENERATED BY A
% SINGLE POINT CHARGE
%{

Given:
    R ............................... particle Radius
    pcharge ......................... point charge 
    pdist ........................... distance between point charge and particle center
    k_air ........................... dielectric constant of surrounding air
    k_sphere ........................ dielectric constant of the sphere 
    N ............................... number of terms for partial sum 

Returns:
    theta ............................ vector of angles corresponding to the surface potential measurements
    spherePot ........................ surface charge potential of the dielectric sphere as a function of theta

See: Electromechanics of Particles, Thomas Jones, Pg. 14
%}


%%{
% MG Attempt

option1 = false; % Only out to 4 terms
option2 = true; % out to N terms

N_Lpterms_opt1 = 4;
N_Lpterms_opt2 = N;

nn = -1;
if (option1 == true)
    A_n = zeros(N_Lpterms_opt1,1);
    nn = N_Lpterms_opt1;
else
    A_n = zeros(N_Lpterms_opt2,1);
    nn = N_Lpterms_opt2;
end

theta = linspace(0,pi,100);

if(option1==true)

    % Legendre Polynomials
    P_n = zeros(length(theta),N_Lpterms_opt1);
    for i = 1:length(theta)
        for j = 1:N_Lpterms_opt1
            if(j==1)
                P_n(i,j) = 1;
            else
                if(j==2)
                    P_n(i,j) = cos(theta(i));
                else
                    if(j==3)
                        P_n(i,j) = (3*(cos(theta(i)).^2 - 1))/2;
                    else
                        if(j==4)
                            P_n(i,j) = (5*(cos(theta(i)).^3) - 3*cos(theta(i)))/2;
                        else
                            P_n(i,j) = 0;
                        end
                    end
                end
            end
        end
    end


    
    
    
else
    if(option2 == true)
        P_n = zeros(length(theta),N_Lpterms_opt2);

        for t = 1:length(theta)

            for i = 1:N_Lpterms_opt2
                sum_i = 0;
                for j = 0:i
                    sum_i = sum_i + (nchoosek(i,j))^2 .* (cos(theta(t))-1).^(i-j) .* (cos(theta(t))+1).^(j);
                end

                P_n(t,i) = 1/(2^i)*sum_i;
            end
        end 
    else
        fprintf('ERROR: Choose option1 or option2 for calculating Legendre Polynomials \n\n\n');
    end
end


% Coefficient A_n
r_pc = sqrt(x_pc^2 + y_pc^2 + z_pc^2);
for j = 1:length(A_n)
    A_n(j) = -pcharge/4/pi/k_air * j*(k_sphere-k_air)/(j*k_sphere + (j+1)*k_air) * (R^(2*j+1))/(r_pc^(j+1));
end


% Sphere Surface Potential as function of theta
spherePot = zeros(length(theta),1);
phi_0 = abs(pcharge)/4/pi/k_air/R;

for i = 1:length(theta)
    dx = x_pc - R*cos(theta(i));
    dy = y_pc - R*sin(theta(i));
    dz = 0;
    dr = sqrt(dx^2 + dy^2 + dz^2);
    
    phi_i_1 = pcharge/4/pi/k_air/dr;
    phi_i_sum = 0;

    for n = 1:nn
        phi_i_sum = phi_i_sum + A_n(n)*P_n(i,n)/(R^(n));
    end

    spherePot(i) = (phi_i_1 + phi_i_sum)/(phi_0);
    
end



end
%}


%{
% XR Successful Code
Radius = R;
theta = linspace(0,pi,100);
potential_th = zeros(length(theta),1);
N_th = length(theta);
x_th = Radius*cos(theta)';
y_th = Radius*sin(theta)';
z_th = linspace(0,0,N_th)';
xp = 1.5*R;
yp = 0;
zp = 0; 

N_term = 20;


for i = 1:N_th
        dx = xp-x_th(i);
        dy = yp-y_th(i);
        dz = zp-z_th(i);
        dr = sqrt(dx*dx+dy*dy+dz*dz);
        % Contribution by point charge
        potential_th(i) = potential_th(i)+pcharge/4/pi/k_air/dr;
        % Contribution by higher-order terms
        k_ratio = k_sphere/k_air;
        for j = 0:N_term
            % Compute coefficient A
            A = -(pcharge/4/pi/k_air)*(j*(k_ratio-1)/(j*(k_ratio+1)+1))...
                *(Radius^(2*j+1))/((xp)^(j+1));
            % Compute Ledengre polynomials
            P = 0;
            x = cos(theta(i));
            for k = 0:j
                P = P + (nchoosek(j,k)^2)*((x-1)^(j-k))*((x+1)^(k));
            end
            P = P/(2^j);
            potential_th(i) = potential_th(i) + A*P/(Radius^(j+1));
        end
        
        spherePot = potential_th;
        
     
end
%}
   


